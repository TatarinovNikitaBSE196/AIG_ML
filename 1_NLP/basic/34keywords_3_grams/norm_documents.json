["occam razor cutting edge parser technology jonathan p", "bowen", "peter", "breuer june 1992 abstract yacc well established compiler compiler field beginning show age", "issue important hardware resource scarce le critical", "precc new compiler compiler tool much versatile yacc whilst retaining efficiency operation modern computer", "cope context dependent bnf grammar description higher order meta construction naturally encountered semi formal concrete syntax specification building fast efficient infinite lookahead tool form ansi compliant c code", "paper provides demonstration state art compiler compiler technology using programming language occam example", "parsing occam particularly difficult compared programming language since indentation integral part language", "however precc tool allows natural implementation occam parser follows syntax closely", "area tool", "william occam c", "1280 1349 entia non sunt multiplicanda praeter necessitatatem", "thing presumed exist absolutely necessary", "occam razor", "ancient philosophical principle often attributed occam used many early thinker 12", "1 existing technology ubiquitous yacc lex tool 10 dominated compiler compiler technology past decade", "yacc us lalr 1 parsing understood promulgated standard textbook time e", "g", "1 ]), primarily construct finite state automaton thus run time loading delimited precisely", "used great importance computer generally limited memory nowadays much le important negative aspect yacc technology started become increasingly significant instead", "firstly lex yacc generated c code monolithic large language description like cobol two hundred keywords generates large virtual automaton swapping problem common runtime even modern workstation", "result poor perceived performance application parser front end matter good application code may", "moreover c compiler often problem generated code", "large lexer parser routine generated lex yacc make slow compilation therefore long turn round time come debugging altering specification", "everything recompiled single change needed source intense frustration software engineer seeking use specification driven utility order cut development maintenance time", "unloaded hp 9000 series workstation sentence typed example lex take 35 compile abbreviated 163 line lexical specification cobol 74 2 700 line c code", "complete 300 line specification take two minute generate 5 000 line c code", "full specification language twice size", "c compiler took 40 compile small code 73 compile larger code giving 110kbyte object module figure grow super linearly size", "wait five ten minute making change lexer testing expected real possibility using debugging aid help diagnosis testing generated code change time famously opaque anyway", "statistic yacc worse script even bigger", "fact term specification alone yacc provide fairly flexible way handling language grammar least reasonable degree efficiency", "however ideal indeed cannot cater language", "allows single token lookahead runtime order decide alternative", "sense therefore runtime semantics ill matched specification language bnf us restriction commonly associated", "moreover implement simple subset standard bnf description format bnf specification unfolded basic component presented yacc script", "result obscure specification difficult maintain least partly responsible excessive size virtual automaton since much repetition necessary", "2 introducing precc tool precc 4 offer flexible tool providing infinite lookahead handling two level van wijngaarden grammar 5 7 15 ease", "grammar powerful include include meta variable hyper rule generation infinite number production", "concept comma separated list x example defined precc x followed arbitrarily many comma x pair different x supplied parameter different part specification yacc construction must expanded term basic construct every point specification needed substituting required name x using alternation sequential constructor yacc specification may also generate shift reduce conflict report compile time production rule contains phooey yacc know whether begin looking x follow comma shift phooey jump already production reduce", "shift reduce report extremely confusing software engineer 1", "refer virtual automaton grammar specification script therefore rely understanding yacc semantics specification language interface ought encourage user forget 2", "report due existence second production rule therefore generated context example phooey rule", "part yacc script may separately correct still fail combined together", "contrast precc specification declarative referentially transparent possible substitute precc parser name definition anywhere script obtain semantics", "semantics parser definition independent context precc parser definition included script provided self consistent", "happens shift reduce report", "precc always shift look data ), later backtracks necessary", "yacc error report function yacc one token lookahead implementation bnf since precc limitation conflict specification language implementation semantics reported", "one problem often associated tool promise provide extra flexibility designer fail ensure tool still efficient enough useful practice", "example obj3 equational logic tool 6 provides parsing arbitrary mixfix notation infinite lookahead", "whilst provides great flexibility becomes rather slow parsing large input program much becomes worthwhile separate efficient parser easily parsable language", "precc like yacc maintains efficiency translating parser description c code", "moreover make use premise modern c compiler make function call fast efficient order make c call stack much work", "precc design assumes function call efficient c many small compact function better single large one", "happily conjecture appears correct precc run quickly practice", "precc compiles similar description cobol 74 lexical specification consisting 162 line 1 500 line c code 1", "1 hp workstation", "c code take longer generate", "c code take 22 compile might expected significant benefit using precc modularity", "precc specification generated code divided module way desired compiled separately linked together incrementally generated function communicate across c stack", "provided c compiler support placeholder prototype place code precc specification need even complete capable running tested", "allows greatly reduced turn round time development maintenance render figure monolithic script c code meaningless", "3 parsing process using c stack function calling work instead virtual automaton liability", "realistic demonstration significant portion concrete syntax occam programming language 9 investigated part presented paper", "philosophical occam razor maxim acceptable tenet distinguished unacceptable one simplicity propose use language occam razor separate acceptable parser technology unacceptable parser technology", "occam divided eleven module follow heading concrete syntax shown figure 1", "occam token module extra concrete syntax former contains useful meta construction latter duty lexical analyser", "module associated precc grammar specification script foo", "c code precc generates foo", "c object module foo", "produced c compiler", "linking object module together precc kernel library give one executable parser", "104 separate definition 400 line generate 2 600 line c code 60 kbytes ), much object code", "experiment precc parser occam show c stack 4kbytes accommodate 300 nested function call therefore averaging 12 byte precc kernel size corresponds occam construct nested five layer deep", "maximum nesting 40 80 column divided 2 space indentation increment imposed language ), runtime stack cannot grow beyond 32kbytes size practice", "acceptable overhead bugbear might feared recursive infinite state machine", "sixty recursive call per occam nesting layer composed 45 reduce equivalent 45 instruction attach provisional action parse later execution 10 shift equivalent shift usually associated input token context save 20bytes permit backtracking", "call push return address zero one two parameter onto stack load introduced precc infinite lookahead backtracking technology high", "occam easy language parse", "particular requires lexical indentation construct left hand edge recognised parser since often delimits scope place perhaps familiar begin end delimiters pascal block structured language `} c", "result knowledge current indentation may needed many point parsing backtracking alternative interpretation may necessary scope possibly several construct ended", "example two program 14 differ indentation one line program left give 10 right 0 scope second seq terminated offside le indented statement", "occam could theoretically handled lr 40 grammar 40 token lookahead since indentation may limited 80 column 2 space per indentation", "yacc could handle practical occam program lr 40 specification expanded lr 1 form", "however would wasteful space automaton table much would duplicated", "use purely synthetic attribute grammar case slightly problematic several syntactic construct may terminated single lexical group", "example group := z belongs outermost seq virtue indentation position terminates two innermost seq construct clear token type present", "prior pas may necessary insert begin end token serve unambiguous delineation block structure amount admitting yacc type technology well suited kind parsing problem", "another area concern particularly safety critical system correctness parsing process 13 14 ], precc also score heavily", "high level language rather assembler recommended safety critical application since increasingly recognised programmer make fewer error result", "however high level language compiler much complicated assembler need higher degree validation become acceptable application", "much current research compiler verification concentrate compilation process abstract tree representation language object code e", "g", "subset occam 8 ])", "indeed many declarative programming language prolog provide explicit support infix operator variable precedence etc", "input program e", "g", "compiler written language supplied abstract tree form sufficiently readable used directly human programmer least prototyping purpose 2", "obviate need supply explicit parser", "alternatively precc may used generate abstract tree input tool thus allowing input language use true concrete syntax even prototype compiler required", "however initial parsing phase concrete representation language abstract parsetree important link whole compilation process practical realistic implementation", "precc make phase amenable validation precc implement well understood higherorder model directly c semantics associated set proof rule demonstrate exactly given stream satisfy satisfy given parse specification", "precc script correspond almost verbatim concrete grammar specification least case arguing precc constructor validated understood proof required", "summary precc attempt provide tool 1", "flexible efficient practice 2", "provides easy mean generate correct parser language cannot dealt conveniently many current compiler compiler tool 3", "offer possibility validated front end", "4 realistic parser occam section present precc parser significant subset occam 2 demonstrates closely parser related bnf style semi formal syntax provided appendix g 9 ], sample given figure 2", "indentation construct specified presenting bnf description indented form appropriate", "corresponding specification precc shown figure 3", "one complicated therefore interesting part specification far parsing concerned", "precc specification differs several respect", "firstly obviously majority construction parameterised", "take parameter n denotes absolute indentation concrete representation conditional 5 denotes construct initial column 5", "concrete specification denotes extra indentation spacing precc specification us incremented parameter instead", "thus choice n 2 included concrete syntax instead choice two space right governing keyword", "secondly precc specification employ special match end line", "although precc match literal ascii line feed control character directly default lexical analyser come precc generates special zero token end line matched `$", "`$ construct see", "though precc use lexers generated lex utility directly exactly way yacc special lexical analysis required purpose trial default lexer used", "lexer pass every character unchanged except substitute line feed control character special zero token", "rationale behind design default lexer end line frequently mark natural break point special action must taken yacc compatible lexers conventionally signal special condition zero token", "action check end file condition attached match zero token", "`$ match end line backtracked `$", "match one cannot", "incorporates special cut symbol", "disables backtracking", "best include many cut possible precc script event error found parsed stream prevent exponential search possible alternative par", "cut one innovative implementational aspect precc comparison 1 parser use c call stack another", "certain begin conditional statement nothing else cut may inserted conceivable may necessary backtrack newline following boolean expression case following stream match clause n 2", "fact probably never going case best allow possibility `$ needed point", "thirdly precc specification us square bracket syntax foo indicate optional inclusion concrete syntax us curly bracket instead", "trivial difference precc reserve curly bracket use grouping parenthesis", "fourthly concrete specification process precc specification clause n 2 instead", "n 2 indicates extra indentation right clause n 2 construct introduced stand indent n 2 process might equally well placed directly specification", "however giving name construction make specification maintainable eliminates repetition narrow range change may made future point", "also make resulting code compact cost tiny loss runtime performance may even optimised away c compiler", "experiment shown function call simple body construction induces usually copied inline code optimizing c compiler", "possible precc declarative semantics", "expression may substituted name expression anywhere text without altering semantics", "precc specification need indent n process construct concrete syntax includes nothing sort", "n space appear left must remembered", "concrete syntax specification drop representation succeeding line showing relative indentation", "inserting explicitly give concrete specification shape precc guardedchoice n definition represent construction starting boolean column n", "full precc specification across two line include n blank space process part whole lower line definition replaced actual script clause n 2", "may define higher order construction pattern frequently reused occam specification", "note blank", "n precc syntax blank repeated n time", "without following expression mean repeated zero time", "one example use indent definition clause n ): script made even flexible required", "precc parser allow process start beyond mandatory two space farther right compute indentation come relative actual position process start although flexibility disallowed standard occam language perhaps becuase extra complexity handling", "may achieved including indented n p instead p n ), defining indented grammar detect extra blank incorporate indentation count inefficiency introduced malformed p following blank may partially scanned twice may considered worthwhile extra flexibility acceptable syntax affords", "also good reason inserting test specification ensure n grow large prevent arbitrary indentation allowed occam folding editor case", "nearly recursion parser introduced one construction", "note turned parenthesis denote parse time test may contain valid c expression returning one zero integer result following c convention boolean value", "danger destroying declarative semantics since c expression may used implement side effect possibility rarely required since cost term maintainability great", "side effect may also incorporated parameter since may arbitrary c expression", "side effect action see attached parse limited effect parse precc discharge action parsing cut point marked specification script", "concrete syntax precc specification differ one final point", "precc specification allows choice case statement preceded optional set specification", "fact concrete syntax specifies elsewhere recursive alternate production choice specification choice respect precc deficient", "production rule given target must appear together alternate equivalent one definition cannot scattered across script across several script", "necessary requirement modularity good practice anyway", "5 tokenisation action mentioned precc parser specification includes token module act lexical analyser rest parser", "need use precc lexer disadvantage either", "module consists eight definition various sort white space one metaproduction help recognition keywords keywords", "module illustrates remaining part precc language quite well", "module shown figure 4", "terminal like digit defined literal section concrete syntax appear literal", "precc specification file", "first point note script line begin `@ passed unchanged c code since precc script literate sense donald knuth", "thus c preprocessor directive may used include file", "occam", "h file contains definition c macro empty test empty string hd return head non empty string tl return tail string", "secondly c macro quite valid parameter grammatical rule boolean test inside turned parenthesis", "c macro c code important use action one attach parser", "action appear colon anywhere rule logically occur sequence corresponding positioning yacc attached action", "action discharged whenever cut point (`", "reached parse specification cut disable backtracking", "action make use synthetic attribute attached terminal nonterminal rule", "syntax exactly yacc thus compatible existing user although perhaps ideal", "`$ 1 refers first component sequence left action `$ 2 second", "value attached whole rule assigning `$$", "assignment made parser intended generate tree representation properly scoped block structure", "thus loweralpha rule output character held 1 value using c printf c ,$ 1 library call", "precc dive c expression order translate reference possible hide within c macro otherwise 1 2 etc may treated like volatile c variable integer type", "character value assigned default lexer placed yylval variable precc requested token", "standard mode lexers generated lex precc default lexer conforms de facto standard even though noticeably le efficient might fast way pas token value precc write directly line time yybuffer address present", "islower expression predicate", "test incoming token using c islower library call", "matching token yylval value scanned attached attribute islower expression", "manner precc handle arbitrary amount tokenising without need separate tool like lex", "6 trial proved possible write concrete occam syntax precc specification script directly documentation maintaining structure syntax document presented", "took author precc ten day effort get everything working", "resulting script remarkably readable may observed portion presented", "inspection nearly always sufficient clarify point doubt parser behaviour one two point debugger resorted turned remarkably easy follow precc semantics action declaration syntax script correspond c function name compiled c code unfortunately meant one two change name concrete syntax required cannot int declaration example clash c type name ), conserved recompilations", "much work done portable pc since precc code portable ansi compliant c programming environment", "precc compiler compiler written self generated c code port across", "resulting code also compiled transferred back networked workstation environment occam parser run quite fast even pc took discover pc allocates 4kbytes thec call stack default", "7 conclusion precc provides balance efficiency flexibility may useful handling programming language conveniently catered currently available compiler compiler tool", "surprisingly include many older language developed lex yacc tool became available therefore made special concession lr 1 technology", "bnf like description arranged module may provided precc generates c code parsing phase compiler translator input language", "module may recompiled separately linked incrementally", "description language support use ordinary parameter meta variable may hold name grammar description", "well occam precc successfully applied full definition ansi cobol 74 use collaborative redo project concerned reverse engineering program written cobol programming language 11", "required translate program higher level form representation first step towards engineering program", "project also considered decompilation well thus allowing possibility generating high level program low level object code 3", "precc currently used generate practical decompiler compiler support technique", "acknowledgement author owe thanks collaborative european esprit redo 2487 procos 3104 project uk ied safemos p1036 project oxford funding input", "reference 1", "v", "aho j", "", "ullman", "principle compiler design", "addison wesley publishing company 1977", "2 j", "p", "bowen", "program object code using logic logic programming", "r", "giegerich", "l", "graham ed", "), code91 international workshop code generation ibfi schloss dagstuhl germany 20 24 may 1991", "springer verlag workshop computing 1992", "appear 3 j", "p", "bowen p", "", "breuer", "decompilation", "h", "van zuylen ed", "), redo compendium reverse engineering software maintenance chapter 9 john wiley son limited 1992", "appear 4 p", "", "breuer", "precc infinite look ahead compiler compiler", "esprit redo project document 2487 tn prg 1002 oxford university computing laboratory uk june 1989", "5 p", "deussen l", "", "wegner", "bibliography van wijngaarden grammar", "bulletin european association theoretical computer science eatcs ), 6 1978", "6 j", "", "goguen", "winkler", "introducing obj3", "technical report sri csl 88 9 sri international menlo park california usa august 1988", "7", "grune", "produce sentence two level grammar", "information processing letter 19 pp", "181 185 1984", "8 c", "", "r", "hoare jifeng j", "p", "bowen p", "k", "pandya algebraic approach verifiable compiling specification prototyping procos level programming language", "directorate general commission european community ed", "), esprit 90 conference proceeding brussels pp", "804 818 kluwer academic publisher b", "v", "1990", "9 inmos limited", "occam 2 reference manual", "prentice hall international series computer science 1988", "10", "c", "johnson", "e", "lesk", "language development tool", "bell system technical journal 57 6 part 2 pp", "2155 2175 july august 1978", "11 k", "c", "lano p", "", "breuer", "program z specification", "j", "e", "nicholls ed", "), z user workshop oxford 1989 pp", "46 70 springer verlag workshop computing 1990", "12 oxford dictionary quotation", "3rd edition oxford university press 1979", "13", "weber wulff", "vw )- grammar concrete pl0 syntax parser correctness", "esprit bra 3104 procos project document kiel dww 2 2 ], christian albrechts universitat zu kiel germany may 1990", "14", "weber wulff", "proven correct front end specification", "b", "von karger ed", "), esprit bra 3104 provably correct system procos draft final deliverable chapter 5 volume 3 compiler development", "1991", "published springer verlag lncs 1992 15 l", "", "wegner", "parsing two level grammar", "acta informatica 14 pp", "175 193 1980"]